# ==== Broker Connection ==== #
[connection]
brokers = ["localhost:9092"]
use_ssl = false

[connection.ssl]
ca_file = "/path/to/ca.pem"
client_cert_file = "/path/to/client_certificate.pem"
client_key_file = "/path/to/client_key.pem"
client_key_password = "password for the private key"
check_hostname = true

# ==== Low-Level Client Options ==== #
[consumer]
# Options passed directly to confluent-kafka and its underlying librdkafka library.
# The dotted keys must be enclosed in "".
# See: https://github.com/confluentinc/librdkafka/blob/master/CONFIGURATION.md
"session.timeout.ms" = 10000
"auto.commit.interval.ms" = 3000
"broker.address.family" = "v4"

[producer]
# Same as above.
"compression.codec" = "zstd"
"linger.ms" = 1000
"batch.num.messages" = 10000
"request.required.acks" = "all"
"message.send.max.retries" = 100
"broker.address.family" = "v4"

# ==== Common Client Options ==== #
[client]
app_id = "domrad-collector-x"
mp_start_method = "forkserver"
workers = 4
# How long to wait in a single Kafka consume request
poll_timeout = 2.0
# How long to wait for a worker to finish (seconds)
worker_kill_timeout = 5.0
# How often check if all worker processes live (seconds)
liveliness_check_interval = 10.0
# How long to wait for the worker processes to initialize before starting to consume input requests (seconds)
init_wait = 1.0
# How long an entry can wait in the to-process queue before a warning is logged (seconds)
entry_late_warning_threshold = 15
# How long an entry can wait in the to-process queue before the whole system gives up (seconds)
max_entry_time_in_queue = 100
# The maximum input queue size
max_queued_items = 10
# After reaching the maximum input queue size specified above, this number of input entries must be processed
# and produced before new items are added to the queue
resume_after_freed_items = 2
# The maximum number of items to retrieve from the processed queue in a single cycle (livelock prevention threshold)
max_entries_to_confirm = 10

# Whether to use rate limiting
enable_rate_limiter = true
# Redis URI for rate limiting (may be empty if the above is 'false')
redis_uri = "redis://localhost:6379"

# ==== Local Rate Limiting ==== #
[rate_limiter.default]
immediate = true
max_wait = 10
rates = [
    { requests = 10, interval_ms = 5000 }
]

[rate_limiter."https://rdap.verisign.com/com/v1/"]
immediate = false
max_wait = 10
rates = [
    { requests = 2, interval_ms = 1000 }
]

[rate_limiter."cz"]
immediate = false
max_wait = 10
rates = [
    { requests = 10, interval_ms = 1000 }
]

[rate_limiter."whois.iana.org"]
immediate = false
max_wait = 5
rates = [
    { requests = 5, interval_ms = 100 },
    { requests = 10, interval_ms = 1000 }
]

[rate_limiter."https://rdap.lacnic.net/rdap/"]
immediate = false
max_wait = 5
rates = [
    { requests = 5, interval_ms = 100 },
    { requests = 10, interval_ms = 1000 }
]

# ==== Collector-Specific Options ==== #
[rdap-dn]
# RDAP request timeout (seconds).
http_timeout = 5

[rdap-ip]
# RDAP request timeout (seconds).
http_timeout = 5

[rtt]
ping_count = 5
privileged_mode = false
timeout_ms = 1200
interval_ms = 800

[dns]
# The DNS servers to use for fallback resolution if the primary NS does not respond.
dns_servers = ["195.113.144.194", "195.113.144.233"]
# A single DNS query timeout.
timeout = 5
# Whether to query the fallback DNS servers in a round-robin fashion.
rotate_nameservers = false
# DNS record types to query for (supported types: A, AAAA, CNAME, MX, NS, TXT).
types_to_scan = ["A", "AAAA", "CNAME", "MX", "NS", "TXT"]
# DNS record types to further process IPs from (supported types: A, AAAA, CNAME, MX, NS).
types_to_process_IPs_from = ["A", "AAAA", "CNAME"]
# Maximum number of retries for a single DNS query in case of a timeout.
max_record_retries = 2
# Log level for the DNS scanner.
scanner_log_level = "INFO"

[zone]
# The DNS servers to use for queries needed for zone resolution.
dns_servers = ["195.113.144.194", "195.113.144.233"]
# A single DNS query timeout (seconds).
timeout = 5
# Whether to query the DNS servers in a round-robin fashion.
rotate_nameservers = true

# ==== Logging ==== #
[logging]
version = 1
disable_existing_loggers = true
worker_level = "TRACE"

[logging.formatters.simple]
class = "logging.Formatter"
format = "[%(name)s][%(process)s|%(processName)s][%(levelname)s]\t%(asctime)s: %(message)s"

[logging.formatters.extra]
class = "common.log.ExtraFormatter"

[logging.handlers.console]
class = "logging.StreamHandler"
formatter = "simple"
level = "TRACE"
stream = "ext://sys.stdout"

[logging.handlers.err]
class = "logging.StreamHandler"
formatter = "simple"
level = "WARNING"
stream = "ext://sys.stderr"

[logging.root]
handlers = ["console", "err"]
level = "INFO"

# ==== Metrics ==== #
[metrics]
enabled = true

[metrics.server]
# Options passed as kwargs for prometheus_client.start_http_server
port = 8080
addr = "127.0.0.1"
